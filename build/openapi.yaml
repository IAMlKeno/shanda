{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "getHelloApp",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/test": {
      "get": {
        "operationId": "testApp",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/forms/{formType}": {
      "get": {
        "operationId": "getFormFields",
        "parameters": [
          {
            "name": "formType",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "A JSON object containing a form's fields and metadata about the information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Failed to find user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Get fields for a form.",
        "tags": [
          "Forms"
        ]
      }
    },
    "/request/templates/{templateId}": {
      "get": {
        "operationId": "getRequestTemplate",
        "parameters": [
          {
            "name": "templateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Got request templates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestTemplateResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to get request templates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Get a requests template",
        "tags": [
          "requestTemplates"
        ]
      }
    },
    "/request/templates": {
      "get": {
        "operationId": "getRequestTemplates",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "size",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Template type \"service_request\", \"parts_request\"",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Got request templatess",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestTemplateListReponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to get request templates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Get all requests template",
        "tags": [
          "requestTemplates"
        ]
      }
    },
    "/vehicles": {
      "post": {
        "description": "Creates a new vehicle.",
        "operationId": "addVehicle",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Adds a new vehicle",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VehicleRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the vehicle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unable to complete the request, the vehicle may exist."
          },
          "500": {
            "description": "Failed to create the vehicle."
          }
        },
        "summary": "Creates a new vehicle.",
        "tags": [
          "Vehicles"
        ]
      },
      "delete": {
        "operationId": "deleteVehicles",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Vehicles"
        ]
      },
      "get": {
        "operationId": "getAllVehicles",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "size",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "query",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Vehicles"
        ]
      }
    },
    "/vehicles/vin/{vin}": {
      "get": {
        "operationId": "vinLookup",
        "parameters": [
          {
            "name": "vin",
            "required": true,
            "in": "path",
            "schema": {
              "example": "WP1AA2A25DLA12497",
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Vehicle Information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleInformationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The entered VIN is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidVehicleVinResponse"
                }
              }
            }
          },
          "404": {
            "description": "Failed to find any vehicle information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "After validating the entered VIN, it lookup the vehicle in the Shanda DB, before attempting to check external sources.",
        "tags": [
          "Vehicles",
          "garage"
        ]
      }
    },
    "/vehicles/removeFromGarage/{vin}": {
      "patch": {
        "description": "Remove a vehicle from your garage",
        "operationId": "removeFromGarage",
        "parameters": [
          {
            "name": "vin",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A boolean response if the operation was a success."
          },
          "500": {
            "description": "Failed to remove the vehicle."
          }
        },
        "summary": "Remove a vehicle from your garage",
        "tags": [
          "Vehicles",
          "garage"
        ]
      }
    },
    "/vehicles/{id}": {
      "get": {
        "operationId": "getVehicles",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Vehicles"
        ]
      },
      "patch": {
        "operationId": "updateVehicles",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Vehicles"
        ]
      }
    },
    "/users/me": {
      "get": {
        "operationId": "loadUser",
        "parameters": [
          {
            "name": "user-token",
            "in": "header",
            "description": "User auth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "A full user object containing references to its profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "404": {
            "description": "Failed to find user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Get the successfully authenticated user and profiles.",
        "tags": [
          "users"
        ]
      }
    },
    "/users/profile": {
      "post": {
        "operationId": "updateDefaultProfile",
        "parameters": [
          {
            "name": "user-token",
            "in": "header",
            "description": "User auth token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfileUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "True or false of whether the account successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "The account failed to udpate and something went wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Update the last profile the user user.",
        "tags": [
          "users"
        ]
      }
    },
    "/users": {
      "post": {
        "operationId": "createUsers",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "users"
        ]
      },
      "get": {
        "operationId": "getAllUsers",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "size",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "query",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "getUsers",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "users"
        ]
      },
      "patch": {
        "operationId": "updateUsers",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/register": {
      "post": {
        "operationId": "registerUser",
        "parameters": [
          {
            "name": "user-token",
            "in": "header",
            "description": "auth0 authentation token (jwt)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to create user and profiles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Creates a user entry using ssoid from Auth0",
        "tags": [
          "Registration"
        ]
      }
    },
    "/profiles/requester": {
      "get": {
        "operationId": "getMyRequesterProfile",
        "parameters": [],
        "responses": {
          "302": {
            "description": "Profile found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequesterProfileResponse"
                }
              }
            }
          },
          "404": {
            "description": "Failed to locate requester profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Get requesters profile",
        "tags": [
          "profiles",
          "profiles/requester"
        ]
      }
    },
    "/profiles/requester/request": {
      "post": {
        "operationId": "createRequest",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Request created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to create a request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Create a request for the user ",
        "tags": [
          "profiles",
          "requests"
        ]
      }
    },
    "/profiles/requester/request/{id}": {
      "patch": {
        "operationId": "updateRequest",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to create a request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Update a request for the user ",
        "tags": [
          "profiles",
          "requests"
        ]
      },
      "get": {
        "operationId": "getRequest",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Got request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestResponse"
                }
              }
            }
          },
          "404": {
            "description": "Failed to get a request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to get a request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Get a request for the user ",
        "tags": [
          "profiles",
          "requests"
        ]
      },
      "delete": {
        "operationId": "deleteRequest",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request delete"
          },
          "500": {
            "description": "Failed to delete a request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Soft delete a request for the user ",
        "tags": [
          "profiles",
          "requests"
        ]
      }
    },
    "/profiles/requester/requests": {
      "get": {
        "operationId": "getRequests",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "size",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "One of the statuses \"open\", \"closed\", or \"pending\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicle",
            "required": false,
            "in": "query",
            "description": "The id of the vehicle",
            "schema": {}
          },
          {
            "name": "query",
            "required": false,
            "in": "query",
            "description": "A text to use to search for a request (fields: description, summary)",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Got requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestListReponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to get list of requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Get all requests for the user",
        "tags": [
          "profiles",
          "requests"
        ]
      }
    },
    "/profiles/requester/request/{id}/receipt": {
      "get": {
        "operationId": "getRequestReceiptRequester",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "profiles"
        ]
      }
    },
    "/profiles/requester/request/receipt/{id}": {
      "get": {
        "operationId": "getReceiptByIdRequester",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "profiles"
        ]
      }
    },
    "/profiles/provider": {
      "get": {
        "operationId": "getMyProviderProfile",
        "parameters": [],
        "responses": {
          "302": {
            "description": "Profile found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderProfileResponse"
                }
              }
            }
          },
          "404": {
            "description": "Failed to locate provider profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Get provider's profile",
        "tags": [
          "profiles",
          "profiles/provider"
        ]
      }
    },
    "/profiles/owner": {
      "get": {
        "operationId": "getMyOwnerProfile",
        "parameters": [],
        "responses": {
          "302": {
            "description": "Profile found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GarageOwnerProfileResponse"
                }
              }
            }
          },
          "404": {
            "description": "Failed to locate owner profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Get garage owners profile",
        "tags": [
          "profiles",
          "profiles/owner"
        ]
      }
    },
    "/requester/garage/addVehicle": {
      "post": {
        "description": "Add a vehicle to your garage. It will not be added if it exists in another garage.",
        "operationId": "addVehicleToMyGarage",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Add vehicle to garage request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddVehicleToGarageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A boolean response if the operation was a success."
          },
          "400": {
            "description": "Specifies that the vehicle exists."
          },
          "500": {
            "description": "Specifies that the vehicle exists."
          }
        },
        "summary": "Adds a vehicle to your garage if it's available",
        "tags": [
          "garage"
        ]
      }
    },
    "/requester/garage": {
      "get": {
        "operationId": "getAllRequestergarage",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "size",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "query",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "garage"
        ]
      },
      "post": {
        "operationId": "createRequestergarage",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "garage"
        ]
      }
    },
    "/requester/garage/{id}": {
      "get": {
        "operationId": "getRequestergarage",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "garage"
        ]
      },
      "patch": {
        "operationId": "updateRequestergarage",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "garage"
        ]
      }
    },
    "/maintenance-log": {
      "post": {
        "operationId": "createMaintenancelog",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "MaintenanceLog"
        ]
      },
      "get": {
        "operationId": "getAllMaintenancelog",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "size",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "query",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "MaintenanceLog"
        ]
      }
    },
    "/maintenance-log/{id}": {
      "get": {
        "operationId": "getMaintenancelog",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "MaintenanceLog"
        ]
      },
      "patch": {
        "operationId": "updateMaintenancelog",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "MaintenanceLog"
        ]
      }
    },
    "/contact-information": {
      "post": {
        "operationId": "createContactinformation",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "ContactInformation"
        ]
      },
      "get": {
        "operationId": "getAllContactinformation",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "size",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "query",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "ContactInformation"
        ]
      }
    },
    "/contact-information/{id}": {
      "get": {
        "operationId": "getContactinformation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "ContactInformation"
        ]
      },
      "patch": {
        "operationId": "updateContactinformation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "ContactInformation"
        ]
      }
    },
    "/host-garage": {
      "post": {
        "operationId": "createHostgarage",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "HostGarage"
        ]
      },
      "get": {
        "operationId": "getAllHostgarage",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "size",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "query",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "HostGarage"
        ]
      }
    },
    "/host-garage/{id}": {
      "get": {
        "operationId": "getHostgarage",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "HostGarage"
        ]
      },
      "patch": {
        "operationId": "updateHostgarage",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "HostGarage"
        ]
      }
    },
    "/company": {
      "post": {
        "operationId": "createCompany",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Company"
        ]
      },
      "get": {
        "operationId": "getAllCompany",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "size",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "query",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Company"
        ]
      }
    },
    "/company/{id}": {
      "get": {
        "operationId": "getCompany",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Company"
        ]
      },
      "patch": {
        "operationId": "updateCompany",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Company"
        ]
      }
    },
    "/bookings": {
      "post": {
        "operationId": "createBookings",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Bookings"
        ]
      },
      "get": {
        "operationId": "getAllBookings",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "size",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "query",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Bookings"
        ]
      }
    },
    "/bookings/{id}": {
      "get": {
        "operationId": "getBookings",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Bookings"
        ]
      },
      "patch": {
        "operationId": "updateBookings",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Bookings"
        ]
      }
    },
    "/bidding": {
      "post": {
        "operationId": "createBidding",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Bidding"
        ]
      },
      "get": {
        "operationId": "getAllBidding",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "size",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "query",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Bidding"
        ]
      }
    },
    "/bidding/{id}": {
      "get": {
        "operationId": "getBidding",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Bidding"
        ]
      },
      "patch": {
        "operationId": "updateBidding",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Bidding"
        ]
      }
    },
    "/auth/login": {
      "get": {
        "operationId": "loginAuth",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/logout": {
      "get": {
        "operationId": "logoutAuth",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Auth"
        ]
      }
    }
  },
  "info": {
    "title": "Shanda API",
    "description": "Shanda API description",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "users",
      "description": ""
    }
  ],
  "servers": [],
  "components": {
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number"
          },
          "data": {
            "type": "object"
          },
          "msg": {
            "type": "string"
          }
        },
        "required": [
          "statusCode",
          "data",
          "msg"
        ]
      },
      "REQUEST_TAGS": {
        "type": "string",
        "enum": [
          "mvi",
          "tires",
          "oil_change",
          "detailing",
          "keys",
          "parts",
          "maintenance"
        ]
      },
      "REQUEST_CATEGORY": {
        "type": "string",
        "enum": [
          "service_request",
          "part_request"
        ]
      },
      "RequestTemplateDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "description": "A list of tags to help identify requests",
            "items": {
              "$ref": "#/components/schemas/REQUEST_TAGS"
            }
          },
          "category": {
            "type": "array",
            "description": "A category for requests",
            "items": {
              "$ref": "#/components/schemas/REQUEST_CATEGORY"
            }
          }
        },
        "required": [
          "id",
          "summary",
          "description"
        ]
      },
      "RequestTemplateResponse": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number"
          },
          "data": {
            "$ref": "#/components/schemas/RequestTemplateDto"
          }
        },
        "description": "Create user data",
        "required": [
          "statusCode",
          "data"
        ]
      },
      "RequestTemplateListReponse": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestTemplateDto"
            }
          },
          "count": {
            "type": "number"
          },
          "totalCount": {
            "type": "number"
          }
        },
        "description": "Get request templates",
        "required": [
          "statusCode",
          "data",
          "count",
          "totalCount"
        ]
      },
      "VehicleRequest": {
        "type": "object",
        "properties": {
          "vin": {
            "type": "string"
          },
          "vehicleInformation": {
            "type": "object",
            "example": {
              "make": "Toyotya",
              "trim": "LE",
              "year": 2020,
              "color": "red",
              "model": "Corolla",
              "mileage": 50000
            }
          }
        },
        "description": "Vehicle request",
        "required": [
          "vin",
          "vehicleInformation"
        ]
      },
      "VehicleDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "vin": {
            "type": "string"
          },
          "vehicleInformation": {
            "type": "object",
            "example": {
              "make": "Toyotya",
              "trim": "LE",
              "year": 2020,
              "color": "red",
              "model": "Corolla",
              "mileage": 50000
            }
          },
          "garageId": {
            "type": "string"
          },
          "vehicleLog": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "vin",
          "vehicleInformation",
          "garageId",
          "vehicleLog"
        ]
      },
      "VehicleResponse": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number"
          },
          "data": {
            "$ref": "#/components/schemas/VehicleDto"
          }
        },
        "required": [
          "statusCode",
          "data"
        ]
      },
      "VehicleInfoDto": {
        "type": "object",
        "properties": {
          "vin": {
            "type": "string"
          },
          "make": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "trim": {
            "type": "string"
          },
          "year": {
            "type": "number"
          },
          "additionalInformation": {
            "type": "object"
          },
          "vehicleLog": {
            "type": "string"
          }
        },
        "required": [
          "vin",
          "make",
          "model",
          "color",
          "trim",
          "year",
          "additionalInformation",
          "vehicleLog"
        ]
      },
      "VehicleInformationResponse": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number"
          },
          "data": {
            "$ref": "#/components/schemas/VehicleInfoDto"
          }
        },
        "required": [
          "statusCode",
          "data"
        ]
      },
      "InvalidVehicleVinResponse": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number"
          },
          "data": {
            "type": "object"
          },
          "msg": {
            "type": "string"
          }
        },
        "required": [
          "statusCode",
          "data",
          "msg"
        ]
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number"
          },
          "data": {
            "type": "object",
            "properties": {
              "me": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "username": {
                    "type": "string"
                  },
                  "requesterId": {
                    "type": "string"
                  },
                  "providerId": {
                    "type": "string"
                  },
                  "ownerId": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "contactInfoId": {
                    "type": "string"
                  },
                  "lastprofileloaded": {
                    "type": "string"
                  },
                  "contactInfo": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "phone": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "profile": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RequesterProfileDto"
                  },
                  {
                    "$ref": "#/components/schemas/ProviderProfileDto"
                  },
                  {
                    "$ref": "#/components/schemas/GarageOwnerProfileDto"
                  }
                ]
              }
            }
          }
        },
        "required": [
          "statusCode",
          "data"
        ]
      },
      "PROFILE_TYPE": {
        "type": "string",
        "enum": [
          "owner",
          "provider",
          "requester"
        ]
      },
      "UserProfileUpdateRequest": {
        "type": "object",
        "properties": {
          "profile": {
            "description": "The last profile type the user accessed. Can be undefined",
            "allOf": [
              {
                "$ref": "#/components/schemas/PROFILE_TYPE"
              }
            ]
          }
        },
        "description": "Update the user default profile",
        "required": [
          "profile"
        ]
      },
      "ContactInformationCreateDto": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "Phone number"
          },
          "email": {
            "type": "string",
            "description": "Email address"
          }
        },
        "description": "Contact information create data",
        "required": [
          "phone",
          "email"
        ]
      },
      "UserRequest": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "contactInfo": {
            "description": "phone, email",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactInformationCreateDto"
              }
            ]
          }
        },
        "description": "Create user data",
        "required": [
          "firstName",
          "lastName",
          "username",
          "contactInfo"
        ]
      },
      "RequesterProfileDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user's Garage Owner profile"
          },
          "contactInfoId": {
            "type": "string"
          },
          "garageId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "userId",
          "contactInfoId",
          "garageId"
        ]
      },
      "RequesterProfileResponse": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number"
          },
          "data": {
            "$ref": "#/components/schemas/RequesterProfileDto"
          }
        },
        "required": [
          "statusCode",
          "data"
        ]
      },
      "CreateRequest": {
        "type": "object",
        "properties": {
          "summary": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "vehicleId": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "description": "A list of tags to help identify requests",
            "items": {
              "$ref": "#/components/schemas/REQUEST_TAGS"
            }
          },
          "category": {
            "description": "A category for requests",
            "default": "service_request",
            "allOf": [
              {
                "$ref": "#/components/schemas/REQUEST_CATEGORY"
              }
            ]
          }
        },
        "description": "Create user data",
        "required": [
          "summary",
          "description",
          "vehicleId"
        ]
      },
      "REQUEST_STATUS": {
        "type": "string",
        "enum": [
          "open",
          "closed",
          "pending"
        ]
      },
      "RequestDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "vehicleId": {
            "type": "string"
          },
          "requesterId": {
            "type": "string"
          },
          "status": {
            "description": "Request status",
            "allOf": [
              {
                "$ref": "#/components/schemas/REQUEST_STATUS"
              }
            ]
          },
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "deleted": {
            "format": "date-time",
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "category": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "summary",
          "description",
          "vehicleId",
          "requesterId",
          "status",
          "created",
          "deleted",
          "tags",
          "category"
        ]
      },
      "RequestResponse": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number"
          },
          "data": {
            "$ref": "#/components/schemas/RequestDto"
          }
        },
        "description": "Create user data",
        "required": [
          "statusCode",
          "data"
        ]
      },
      "UpdateRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "vehicleId": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "description": "A list of tags to help identify requests",
            "items": {
              "$ref": "#/components/schemas/REQUEST_TAGS"
            }
          },
          "category": {
            "type": "array",
            "description": "A category for requests",
            "items": {
              "$ref": "#/components/schemas/REQUEST_CATEGORY"
            }
          }
        },
        "description": "Update request data",
        "required": [
          "id",
          "vehicleId",
          "tags",
          "category"
        ]
      },
      "RequestListReponse": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestDto"
            }
          },
          "count": {
            "type": "number"
          },
          "totalCount": {
            "type": "number"
          }
        },
        "description": "Get list of requests",
        "required": [
          "statusCode",
          "data",
          "count",
          "totalCount"
        ]
      },
      "ProviderProfileDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user's Garage Owner profile"
          },
          "companyId": {
            "type": "string"
          },
          "contactInfoId": {
            "type": "string",
            "description": "The id for contact information"
          }
        },
        "required": [
          "id",
          "userId",
          "companyId",
          "contactInfoId"
        ]
      },
      "ProviderProfileResponse": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number"
          },
          "data": {
            "$ref": "#/components/schemas/ProviderProfileDto"
          }
        },
        "required": [
          "statusCode",
          "data"
        ]
      },
      "GarageOwnerProfileDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user's Garage Owner profile"
          },
          "garage": {
            "type": "string"
          },
          "contactInfo": {
            "type": "string",
            "description": "The id for contact information"
          }
        },
        "required": [
          "id",
          "userId",
          "garage",
          "contactInfo"
        ]
      },
      "GarageOwnerProfileResponse": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number"
          },
          "data": {
            "$ref": "#/components/schemas/GarageOwnerProfileDto"
          }
        },
        "required": [
          "statusCode",
          "data"
        ]
      },
      "AddVehicleToGarageRequest": {
        "type": "object",
        "properties": {
          "vin": {
            "type": "string"
          }
        },
        "description": "Add vehicle by vin.",
        "required": [
          "vin"
        ]
      },
      "RequesterGarageDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "vehicles": {
            "description": "A group of vehicles in the garage.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "vehicles"
        ]
      },
      "RequesterGarageResponse": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number"
          },
          "data": {
            "$ref": "#/components/schemas/RequesterGarageDto"
          }
        },
        "required": [
          "statusCode",
          "data"
        ]
      }
    }
  }
}

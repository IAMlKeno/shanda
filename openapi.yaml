openapi: 3.0.0
paths:
  /users/me:
    get:
      operationId: loadUser
      parameters:
        - name: user-token
          in: header
          description: User auth token
          schema:
            type: string
      responses:
        '302':
          description: A full user object containing references to its profiles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: Failed to find user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      summary: Get the successfully authenticated user and profiles.
      tags:
        - Users
  /users/me/requester:
    get:
      summary: 'Get the logged in user''s requester profile'
      operationId: getMyRequesterProfileOld
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequesterProfileResponse'
      tags:
        - Users
  /users:
    post:
      summary: 'Creates a user and their incomplete profiles'
      operationId: createUser
      parameters:
        - name: user-token
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'User data'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: 'Successfully created user and profiles are being created'
      tags:
        - Users
    get:
      summary: 'Reserved for admin users'
      operationId: getAllUsers
      parameters:
        - name: page
          required: true
          in: query
          schema:
            type: number
        - name: size
          required: true
          in: query
          schema:
            type: number
        - name: query
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Users
  /users/{id}:
    get:
      summary: 'Reserved for admin users'
      operationId: getUsers
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Users
    patch:
      summary: 'Reserved for admin users'
      operationId: updateUsers
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Users
  /profiles/me/provider:
    get:
      summary: 'Get the logged in user''s provider profile'
      operationId: getMyProviderProfile
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderProfileResponse'
      tags:
        - Profile
  /profiles/me/owner:
    get:
      summary: 'Get the logged in user''s garage owner profile'
      operationId: getMyOwnerProfile
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GarageOwnerProfileResponse'
      tags:
        - Profile
  /profiles/me/requester:
    get:
      summary: 'Get the authenicated user''s requester profile'
      operationId: getMyRequesterProfile
      parameters:
        - name: user-token
          in: header
          description: User auth token
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequesterProfileResponse'
      tags:
        - Profile
  /profiles/requester/{id}:
    get:
      summary: 'Get a requester profile by ID'
      operationId: getRequesterProfileById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequesterProfileResponse'
      tags:
        - Profile
  /profiles/provider/{id}:
    get:
      summary: 'Get a service provider profile by ID'
      operationId: getProviderProfileById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderProfileResponse'
      tags:
        - Profile
  /profiles/owner/{id}:
    get:
      summary: 'Get a garage owner profile by ID'
      operationId: getOwnerProfileById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GarageOwnerProfileResponse'
      tags:
        - Profile
  /request:
    post:
      summary: 'Create a new request'
      operationId: createRequest
      requestBody:
        description: 'Request data'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleRequestRequest'
      parameters: []
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestResponse'
      tags:
        - Request
  /request/{id}:
    get:
      operationId: getRequest
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestResponse'
      tags:
        - Request
    patch:
      operationId: updateRequest
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
      tags:
        - Request
    delete:
      operationId: deleteRequest
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Request
  /request/{id}/receipt:
    get:
      operationId: getRequestReceipt
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestReceiptResponse'
      tags:
        - Request
  /requester-garage:
    post:
      operationId: createVehicleGarage
      parameters: []
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleGarageResponse'
      tags:
        - RequesterGarage
  /me/requester-garage:
    get:
      operationId: getMyVehicleGarage
      parameters:
        - name: user-token
          in: header
          schema:
            type: string
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleGarageResponse'
      tags:
        - RequesterGarage
  /requester-garage/{id}:
    get:
      operationId: getVehicleGarage
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleGarageResponse'
      tags:
        - RequesterGarage
    patch:
      operationId: updateVehicleGarage
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleGarageResponse'
      tags:
        - RequesterGarage
  /vehicle:
    post:
      operationId: createVehicle
      parameters: []
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleResponse'
      tags:
        - Vehicles
    get:
      summary: 'Reserved for admin'
      operationId: getAllVehicles
      parameters:
        - name: page
          required: true
          in: query
          schema:
            type: number
        - name: size
          required: true
          in: query
          schema:
            type: number
        - name: query
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Vehicles
  /vehicle/{id}:
    get:
      operationId: getVehicleById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleResponse'
      tags:
        - Vehicles
    patch:
      operationId: updateVehicles
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleResponse'
      tags:
        - Vehicles
  /contact-information:
    post:
      operationId: createContactinformation
      parameters: []
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactInfoResponse'
      tags:
        - ContactInformation
    get:
      summary: 'NOT IMPLEMENTED'
      operationId: getAllContactinformation
      parameters:
        - name: page
          required: true
          in: query
          schema:
            type: number
        - name: size
          required: true
          in: query
          schema:
            type: number
        - name: query
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - ContactInformation
  /contact-information/{id}:
    get:
      operationId: getContactinformation
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactInfoResponse'
      tags:
        - ContactInformation
    patch:
      operationId: updateContactinformation
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactInfoResponse'
      tags:
        - ContactInformation
  /host-garage:
    post:
      operationId: createHostgarage
      parameters: []
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostGarageResponse'
      tags:
        - HostGarage
    get:
      summary: 'Not implemented'
      operationId: getAllHostgarage
      parameters:
        - name: page
          required: true
          in: query
          schema:
            type: number
        - name: size
          required: true
          in: query
          schema:
            type: number
        - name: query
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - HostGarage
  /host-garage/{id}:
    get:
      operationId: getHostgarage
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostGarageResponse'
      tags:
        - HostGarage
    patch:
      operationId: updateHostgarage
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostGarageResponse'
      tags:
        - HostGarage
  /company:
    post:
      operationId: createCompany
      parameters: []
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyResponse'
      tags:
        - Company
    get:
      summary: 'Reserved for admin'
      operationId: getAllCompanies
      parameters:
        - name: page
          required: true
          in: query
          schema:
            type: number
        - name: size
          required: true
          in: query
          schema:
            type: number
        - name: query
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyListResponse'
      tags:
        - Company
  /company/{id}:
    get:
      operationId: getCompany
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyResponse'
      tags:
        - Company
    patch:
      operationId: updateCompany
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Company
  /bookings:
    post:
      operationId: createBookings
      parameters: []
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BidResponse'
      tags:
        - Bookings
    get:
      operationId: getAllBookings
      parameters:
        - name: user-token
          in: header
          required: true
          schema:
            type: string
        - name: page
          required: true
          in: query
          schema:
            type: number
        - name: size
          required: true
          in: query
          schema:
            type: number
        - name: query
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Bookings
  /me/bookings:
    get:
      operationId: getMyBookings
      parameters:
        - name: page
          required: true
          in: query
          schema:
            type: number
        - name: size
          required: true
          in: query
          schema:
            type: number
        - name: query
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingListResponse'
      tags:
        - Bookings
  /bookings/{id}:
    get:
      operationId: getBookings
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Bookings
    patch:
      operationId: updateBookings
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Bookings
    delete:
      summary: 'Soft delete a booking'
      operationId: deleteBooking
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Bookings
  /bidding:
    post:
      operationId: createBid
      parameters: []
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BidResponse'
      tags:
        - Bidding
    get:
      operationId: getAllBids
      parameters:
        - name: page
          required: true
          in: query
          schema:
            type: number
        - name: size
          required: true
          in: query
          schema:
            type: number
        - name: query
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Bidding
  /me/bids:
    get:
      summary: 'Get my bids'
      operationId: getMyBids
      parameters:
        - name: user-token
          required: true
          in: header
          schema:
            type: string
        - name: page
          required: true
          in: query
          schema:
            type: number
        - name: size
          required: true
          in: query
          schema:
            type: number
        - name: query
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: 'Get by bids'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BidListResponse'
      tags:
        - Bidding
  /bidding/{id}:
    get:
      operationId: getBid
      parameters:
        - name: user-token
          in: header
          required: true
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BidResponse'
      tags:
        - Bidding
    patch:
      operationId: updateBid
      parameters:
        - name: user-token
          in: header
          required: true
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BidResponse'
      tags:
        - Bidding
  /maintenance-log:
    post:
      summary: 'not implemented'
      operationId: createMaintenancelog
      parameters: []
      responses:
        '201':
          description: ''
      tags:
        - MaintenanceLog
  /vehicle/{vehicleId}/maintenance-log:
    get:
      summary: 'Get vehicle maintenance log'
      operationId: getVehicleLogByVehicleId
      parameters:
        - name: vehicleId
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleLogResponse'
      tags:
        - MaintenanceLog
        - Vehicles
  /vehicle/maintenance-log:
    post:
      summary: 'Get vehicle maintenance log'
      operationId: getVehicleLog
      requestBody:
        description: 'VIN'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetVehicleLogRequest'
      responses:
        '200':
          description: ''
      tags:
        - MaintenanceLog
        - Vehicles
  /maintenance-log/{id}:
    get:
      operationId: getMaintenancelog
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleLogResponse'
      tags:
        - MaintenanceLog
    patch:
      operationId: updateMaintenancelog
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - MaintenanceLog
info:
  title: Shanda API
  description: Shanda API description
  version: '1.0'
  contact: {}
servers: []
components:
  schemas:
    Bid:
      type: object
      properties:
        id:
          type: string
        bidderId:
          type: string
        revisionId:
          type: string
        requestId:
          type: string
    Booking:
      type: object
      properties:
        id:
          type: string
          format: uuid
        created:
          type: string
          format: date
        acceptedDate?:
          type: string
          format: date
        completionDate?:
          type: string
          format: date
        notes?:
          type: string
        requestId:
          type: string
          format: uuid
        winningBidId?:
          type: string
          format: uuid
        expectedCompletionDate?:
          type: string
          format: date-time
        garageId?:
          type: string
          format: uuid
    Company:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        hstNumber:
          type: string
        contactInformation:
           $ref: '#/components/schemas/ContactInformation'
    ContactInformation:
      type: object
      properties:
        id?:
          type: string
        phone:
          type: string
        email:
          type: string
        address:
          type: object
    GarageOwner:
      type: object
      properties:
        id:
          type: string
        profile:
          $ref: '#/components/schemas/Profile'
        garages:
          type: array
          items:
            $ref: '#/components/schemas/HostGarage'

    HostGarage:
      type: object
      properties:
        id:
          type: string
        nickname:
          type: string
        location:
          type: object
        ownerId:
          type: string
          format: uuid
    Job:
      type: object
      properties:
        id:
          type: string
          format: uuid
        created:
          type: string
          format: date-time
        providerId:
          type: string
          format: uuid
        bookingId:
          type: string
          format: uuid
        status:
          type: string
    Profile:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
    Provider:
      type: object
      properties:
        id:
          type: string
        profile:
          $ref: '#/components/schemas/Profile'
        company?:
          $ref: '#/components/schemas/Company'
    Receipt:
      type: object
      properties:
        id:
          type: string
          format: uuid
        transactionNumber:
          type: string
        created:
          type: string
          format: date
        datePaid:
          type: string
          format: date
        bookingId:
          type: string
          format: uuid
        paymentStatus?:
          type: string
        requesterId:
          type: string
          format: uuid

    Request:
      type: object
      properties:
        id:
          type: string
          format: uuid
        summary:
          type: string
        description:
          type: string
        vehicleId:
          type: string
          format: uuid
        requesterId:
          type: string
          format: uuid
        created:
          type: string
          format: date
        updated:
          type: string
          format: date
        bids?:
          type: array
          items:
            $ref: '#/components/schemas/Bid'
    Requester:
      type: object
      properties:
        id:
          type: string
        profile:
          $ref: '#/components/schemas/Profile'
        garage:
          $ref: '#/components/schemas/VehicleGarage'
    Vehicle:
      type: object
      properties:
        VIN:
          type: string
        attributes:
          type: object
    VehicleLog:
      type: object
      properties:
        id:
          type: string
          format: uuid
        details?:
          type: string
          format: json
    VehicleRequest:
      type: object
      properties:
        id:
          type: string
        summary:
          type: string
        description:
          type: string
        vehicleId:
          type: string
        requesterId:
          type: string
    VehicleGarage:
      type: object
      properties:
        vehicles:
          type: array
          items:
            type: object
            properties:
              vehicle:
                $ref: '#/components/schemas/Vehicle'


    BidResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Bid'
    BidListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Bid'
    BookingResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Booking'
    BookingListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Booking'
    HostGarageResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/HostGarage'
    HostGarageListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/HostGarage'
    RequesterProfileResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Requester'
    ProviderProfileResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Provider'
    GarageOwnerProfileResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/GarageOwner'
    VehicleRequestResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Request'
    RequestReceiptResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Receipt'
    UserResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: string
            firstName:
              type: string
            lastName:
              type: string
            username:
              type: string
            created?:
              type: string
              format: date-time
            contactInfo:
              $ref: '#/components/schemas/ContactInformation'
            status?:
              type: string
        profiles:
          type: object
          properties:
            requesterProfileId:
              type: string
            providerProfileId:
              type: string
            ownerProfileId:
              type: string
      required:
        - data
        - profiles
        - user
    RequestResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Request'
    VehicleGarageResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/VehicleGarage'
    VehicleResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Vehicle'
    VehicleLogResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/VehicleLog'
    JobResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Job'
    JobListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Job'
    RequestsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Request'
    ContactInfoResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ContactInformation'
    CompanyResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Company'
    CompanyListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Company'
    ListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
    ErrorResponse:
      type: object
      properties:
        data:
          type: object
        msg:
          type: string
      required:
        - data
        - msg
    UserRequest:
      type: object
      required:
        - firstName
        - username
        - contactInfoId
      properties:
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        contactInfo:
          $ref: '#/components/schemas/ContactInformation'
    CreateVehicleRequest:
      type: object
      required:
        - vin
        - garageId
      properties:
        vin:
          type: string
        vehicleInformation:
          type: object
        garageId:
          type: string
          format: uuid
    VehicleRequestRequest:
      type: object
      required:
        - summary
        - vehicleId
        - requesterId
      properties:
        summary:
          type: string
        description:
          type: string
        vehicleId:
          type: string
          format: uuid
        requesterId:
          type: string
          format: uuid
    GetVehicleLogRequest:
      type: object
      required:
        - vin
      properties:
        vin:
          type: string
